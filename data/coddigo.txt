// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> NOVA VERS√ÉO TESTE 02/06/2025 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

// import dotenv from "dotenv";
// dotenv.config();

// import pkg from "openai";
// const { OpenAI } = pkg;
// import pool from "../config/db.js";
// import Papa from "papaparse";
// import fs from "fs";
// import path from "path";

// if (!process.env.OPENAI_API_KEY) {
//   throw new Error("‚ùå OPENAI_API_KEY n√£o definida no .env");
// }

// const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// // ============================================
// // üìö VARI√ÅVEIS GLOBAIS
// // ============================================
// let cursosDisponiveis = [];
// let cidadesDisponiveis = [];
// let dicionarioDescricoes = {};
// let descricaoCarregada = false;

// // ============================================
// // üóÇÔ∏è FUN√á√ÉO PARA CARREGAR CURSOS
// // ============================================
// function carregarCursosDoCSV() {
//   try {
//     const csvPath = path.join(process.cwd(), "src", "data", "novos_cursos.csv");
//     console.log(`üìÅ Tentando carregar: ${csvPath}`);

//     if (!fs.existsSync(csvPath)) {
//       console.error(`‚ùå Arquivo n√£o encontrado: ${csvPath}`);
//       return { cursosDisponiveis: [], cidadesDisponiveis: [] };
//     }

//     const csvData = fs.readFileSync(csvPath, "utf8");
//     console.log(`üìä Tamanho do arquivo: ${csvData.length} caracteres`);

//     const result = Papa.parse(csvData, {
//       header: true,
//       skipEmptyLines: true,
//       dynamicTyping: false,
//       delimiter: ",", // For√ßa v√≠rgula como separador
//       quoteChar: '"',
//     });

//     console.log(`üìä Linhas processadas: ${result.data.length}`);
//     console.log(`üìã Colunas detectadas:`, result.meta.fields);

//     if (result.errors && result.errors.length > 0) {
//       console.warn("‚ö†Ô∏è Erros na parsea√ß√£o:", result.errors);
//     }

//     const cursos = result.data;

//     // Debug do primeiro item
//     if (cursos.length > 0) {
//       console.log("\nüîç PRIMEIRO ITEM COMPLETO:");
//       Object.entries(cursos[0]).forEach(([key, value]) => {
//         console.log(`   "${key}": "${value}"`);
//       });
//     }

//     // Estrat√©gias m√∫ltiplas para extrair cursos
//     let cursosExtraidos = [];

//     // Estrat√©gia 1: nome_curso
//     const estrategia1 = [
//       ...new Set(cursos.map((c) => c.nome_curso).filter(Boolean)),
//     ];
//     if (estrategia1.length > 0) {
//       cursosExtraidos = estrategia1;
//       console.log(
//         `‚úÖ Usando estrat√©gia 1 (nome_curso): ${estrategia1.length} cursos`
//       );
//     }

//     // Estrat√©gia 2: curso
//     if (cursosExtraidos.length === 0) {
//       const estrategia2 = [
//         ...new Set(cursos.map((c) => c.curso).filter(Boolean)),
//       ];
//       if (estrategia2.length > 0) {
//         cursosExtraidos = estrategia2;
//         console.log(
//           `‚úÖ Usando estrat√©gia 2 (curso): ${estrategia2.length} cursos`
//         );
//       }
//     }

//     // Estrat√©gia 3: Curso (mai√∫scula)
//     if (cursosExtraidos.length === 0) {
//       const estrategia3 = [
//         ...new Set(cursos.map((c) => c.Curso).filter(Boolean)),
//       ];
//       if (estrategia3.length > 0) {
//         cursosExtraidos = estrategia3;
//         console.log(
//           `‚úÖ Usando estrat√©gia 3 (Curso): ${estrategia3.length} cursos`
//         );
//       }
//     }

//     // Extrair cidades
//     const cidadesExtraidas = [
//       ...new Set(cursos.map((c) => c.cidade).filter(Boolean)),
//     ];

//     console.log(`\n‚úÖ RESULTADO FINAL:`);
//     console.log(`   Cursos √∫nicos: ${cursosExtraidos.length}`);
//     console.log(`   Cidades √∫nicas: ${cidadesExtraidas.length}`);

//     if (cursosExtraidos.length > 0) {
//       console.log(
//         `   Exemplos de cursos: ${cursosExtraidos.slice(0, 3).join(", ")}`
//       );
//     }

//     if (cidadesExtraidas.length > 0) {
//       console.log(
//         `   Exemplos de cidades: ${cidadesExtraidas.slice(0, 3).join(", ")}`
//       );
//     }

//     // Atualizar vari√°veis globais
//     cursosDisponiveis = cursosExtraidos;
//     cidadesDisponiveis = cidadesExtraidas;

//     return {
//       cursosDisponiveis: cursosExtraidos,
//       cidadesDisponiveis: cidadesExtraidas,
//     };
//   } catch (error) {
//     console.error("‚ùå Erro ao carregar cursos do CSV:", error);
//     return { cursosDisponiveis: [], cidadesDisponiveis: [] };
//   }
// }

// // ============================================
// // üìñ FUN√á√ÉO PARA CARREGAR DESCRI√á√ïES
// // ============================================
// function carregarDescricoesDoCSV() {
//   if (descricaoCarregada) {
//     return dicionarioDescricoes;
//   }

//   try {
//     const csvPath = path.join(
//       process.cwd(),
//       "src",
//       "data",
//       "curso_tecnicos.csv"
//     );

//     if (!fs.existsSync(csvPath)) {
//       console.warn("‚ö†Ô∏è Arquivo de descri√ß√µes n√£o encontrado:", csvPath);
//       return {};
//     }

//     const csvData = fs.readFileSync(csvPath, "utf8");

//     const result = Papa.parse(csvData, {
//       header: true,
//       skipEmptyLines: true,
//       dynamicTyping: false,
//       delimiter: ",",
//       quoteChar: '"',
//     });

//     const descricoes = result.data;
//     dicionarioDescricoes = {};

//     // Processar cada linha do CSV
//     descricoes.forEach((row) => {
//       const nomeBruto = row["Nome do Curso"];
//       if (!nomeBruto) return;

//       // Normalizar o nome para busca
//       const nomeNormalizado = nomeBruto
//         .toLowerCase()
//         .normalize("NFD")
//         .replace(/[\u0300-\u036f]/g, "");

//       // Armazenar no dicion√°rio
//       dicionarioDescricoes[nomeNormalizado] = {
//         nome: nomeBruto,
//         objetivo: row["Objetivos do Curso"] || "Informa√ß√£o n√£o dispon√≠vel",
//         publicoAlvo: row["P√∫blico-Alvo"] || "Informa√ß√£o n√£o dispon√≠vel",
//         ondeTrabalhar:
//           row["Onde Pode Trabalhar"] || "Informa√ß√£o n√£o dispon√≠vel",
//       };
//     });

//     descricaoCarregada = true;
//     console.log(
//       `‚úÖ Carregadas descri√ß√µes de ${
//         Object.keys(dicionarioDescricoes).length
//       } cursos`
//     );

//     return dicionarioDescricoes;
//   } catch (error) {
//     console.error("‚ùå Erro ao carregar descri√ß√µes do CSV:", error);
//     return {};
//   }
// }

// // ============================================
// // üîç FUN√á√ïES DE DETEC√á√ÉO DE PERGUNTAS SOBRE DESCRI√á√ÉO
// // ============================================

// /**
//  * Detecta se o usu√°rio est√° perguntando sobre descri√ß√£o/conte√∫do de um curso espec√≠fico
//  */
// function detectarPerguntaDescricao(userMessage) {
//   const msgLower = userMessage.toLowerCase();

//   // Exclus√µes - N√ÉO s√£o perguntas sobre descri√ß√£o
//   const exclusoes = [
//     /tem\?$/,
//     /voc√™s t√™m/,
//     /existe/,
//     /dispon√≠vel/,
//     /oferece/,
//     /em\s+\w+.*modalidade/,
//     /modalidade.*em\s+\w+/,
//     /na\s+modalidade.*em/,
//     /em\s+\w+.*ead|presencial/,
//     /quais\s+cursos/,
//     /que\s+cursos/,
//     /lista.*cursos/,
//   ];

//   if (exclusoes.some((regex) => regex.test(msgLower))) {
//     return false;
//   }

//   // Inclus√µes - S√ÉO perguntas sobre descri√ß√£o
//   const palavrasChaveDescricao = [
//     /o que √©\s+(?:o\s+)?curso\s+de\s+\w+/,
//     /sobre\s+o\s+curso\s+de\s+\w+/,
//     /do que se trata\s+(?:o\s+)?curso/,
//     /conte√∫do\s+do\s+curso\s+de/,
//     /o que\s+vou\s+aprender.*curso\s+de/,
//     /mat√©rias\s+do\s+curso/,
//     /disciplinas.*curso\s+de/,
//     /grade\s+curricular.*curso/,
//     /objetivo.*curso\s+de/,
//     /onde\s+posso\s+trabalhar.*curso\s+de/,
//     /√°rea\s+de\s+atua√ß√£o.*curso/,
//     /mercado\s+de\s+trabalho.*curso/,
//     /p√∫blico\s+alvo.*curso/,
//     /para\s+quem\s+√©.*curso\s+de/,
//     /quem\s+pode\s+fazer.*curso\s+de/,
//     /me fale sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /fale\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /me conte sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /conte\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+as\s+mat√©rias\s+do\s+curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+mat√©rias.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /que\s+mat√©rias.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+as\s+disciplinas.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+disciplinas.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /qual\s+a\s+carga\s+hor√°ria\s+do\s+curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /qual\s+a\s+carga\s+horaria\s+do\s+curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /carga\s+hor√°ria.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /carga\s+horaria.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quantas\s+horas.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /explique\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /me explique\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /descreva\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /me descreva\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /dura√ß√£o.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /duracao.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quanto\s+tempo\s+dura.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /tempo\s+de\s+dura√ß√£o.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quantos\s+semestres.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quantos\s+anos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /informa√ß√µes\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /informacoes\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /detalhes\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /gostaria\s+de\s+saber\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quero\s+saber\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /estrutura.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /m√≥dulos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /modulos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+os\s+m√≥dulos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /matriz\s+curricular.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /ementa.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /objetivos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /qual\s+o\s+objetivo.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+os\s+objetivos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /finalidade.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /para\s+que\s+serve.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /compet√™ncias.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /competencias.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /habilidades.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /skills.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /o\s+que\s+desenvolve.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /pr√©-requisitos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /pre\s+requisitos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /requisitos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /p√∫blico-alvo.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /publico\s+alvo.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quem\s+pode\s+fazer.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /onde\s+trabalhar.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /campo\s+de\s+trabalho.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /oportunidades.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /carreira.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /profiss√£o.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /emprego.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /como\s+√©\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /vale\s+a\s+pena.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /√©\s+bom.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//   ];

//   return palavrasChaveDescricao.some((regex) => regex.test(msgLower));
// }

// /**
//  * Extrai o nome do curso de uma pergunta sobre descri√ß√£o
//  */
// function extrairNomeCursoDaPergunta(userMessage) {
//   const padroes = [
//     /o que √©\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)?(.+?)(?:\?|$)/i,
//     /sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)?(.+?)(?:\?|$)/i,
//     /conte√∫do\s+do\s+curso\s+(?:de\s+)?(.+?)(?:\?|$)/i,
//     /o que\s+vou\s+aprender.*curso\s+(?:de\s+)?(.+?)(?:\?|$)/i,
//     /mat√©rias\s+do\s+curso\s+(?:de\s+)?(.+?)(?:\?|$)/i,
//     /^(.+?)\s+[-‚Äì]\s*(?:o que √©|sobre|conte√∫do)/i,
//     /curso\s+(?:de\s+)?(.+?)\s+[-‚Äì]\s*(?:conte√∫do|o que √©|sobre)/i,
//   ];

//   for (const padrao of padroes) {
//     const match = userMessage.match(padrao);
//     if (match && match[1]) {
//       let nomeCurso = match[1].trim();

//       // Limpar o nome extra√≠do
//       nomeCurso = nomeCurso
//         .replace(/^(do|da|de|curso|t√©cnico|em|na|no)\s+/i, "")
//         .replace(/\s+(do|da|de|curso|t√©cnico|tem|existe)$/i, "")
//         .replace(/\s+e\s+.*/i, "")
//         .replace(/\s*[,;].*/i, "")
//         .trim();

//       // Verificar se o nome √© v√°lido
//       const palavrasGenericas = [
//         "curso",
//         "cursos",
//         "t√©cnico",
//         "modalidade",
//         "ead",
//         "presencial",
//       ];
//       if (
//         nomeCurso.length > 2 &&
//         !palavrasGenericas.includes(nomeCurso.toLowerCase())
//       ) {
//         return nomeCurso;
//       }
//     }
//   }

//   // Fallback: procurar diretamente pelos nomes dos cursos dispon√≠veis
//   for (const curso of cursosDisponiveis) {
//     if (userMessage.toLowerCase().includes(curso.toLowerCase())) {
//       return curso;
//     }
//   }

//   return null;
// }

// /**
//  * Busca descri√ß√£o de um curso no dicion√°rio carregado
//  */
// function buscarDescricaoCurso(nomeCurso) {
//   if (!nomeCurso) return null;

//   // Garantir que as descri√ß√µes est√£o carregadas
//   carregarDescricoesDoCSV();

//   // Normalizar o nome para busca
//   const nomeNormalizado = nomeCurso
//     .toLowerCase()
//     .normalize("NFD")
//     .replace(/[\u0300-\u036f]/g, "");

//   const curso = dicionarioDescricoes[nomeNormalizado];

//   if (curso) {
//     return `üìö **${curso.nome}**

// üéØ **Objetivo do Curso:**
// ${curso.objetivo}

// üë• **P√∫blico-Alvo:**
// ${curso.publicoAlvo}

// üíº **Onde Pode Trabalhar:**
// ${curso.ondeTrabalhar}`;
//   }

//   return null;
// }

// // ============================================
// // ü§ñ FUN√á√ÉO PRINCIPAL DO CHAT
// // ============================================

// /**
//  * Envia a mensagem do usu√°rio para o modelo GPT com hist√≥rico
//  */
// async function getChatResponse(userMessage, email) {
//   try {
//     const mensagens = [
//       {
//         role: "system",
//         content: `
// Voc√™ √© o assistente virtual especializado em Cursos T√©cnicos do Senai Paran√°.

// Sua miss√£o √© acolher, informar e converter leads interessados em matr√≠culas nos cursos t√©cnicos oferecidos pelo Senai Paran√°.

// Adote um tom simp√°tico, acolhedor, direto e √∫til. Sempre utilize gatilhos mentais para incentivar a realiza√ß√£o da pr√©-matr√≠cula.

// ---

// üìö **CURSOS DISPON√çVEIS (APENAS ESTES EXISTEM):**
// ${cursosDisponiveis.map((curso) => `‚Ä¢ ${curso}`).join("\n")}

// üèôÔ∏è **CIDADES DISPON√çVEIS (APENAS ESTAS EXISTEM):**
// ${cidadesDisponiveis.map((cidade) => `‚Ä¢ ${cidade}`).join("\n")}

// ‚ö†Ô∏è **IMPORTANTE:** Voc√™ s√≥ pode mencionar cursos e cidades que est√£o nas listas acima. Se o usu√°rio perguntar sobre um curso ou cidade que n√£o existe na lista, informe educadamente que n√£o temos essa op√ß√£o dispon√≠vel e sugira alternativas similares da lista ou pe√ßa para falar com um atendente.

// ---

// üè¢ **TRATAMENTO ESPECIAL PARA CURITIBA:**

// Quando o usu√°rio mencionar **"Curitiba"** como cidade desejada, voc√™ deve responder:

// "√ìtimo! Em Curitiba temos 4 unidades do SENAI para voc√™ escolher:

// üìç **Boqueir√£o** - Regi√£o sul de Curitiba
// üìç **Campus da Ind√∫stria** - Regi√£o central
// üìç **CIC** - Cidade Industrial de Curitiba
// üìç **Dr. Celso Charuri** - Regi√£o espec√≠fica

// Qual dessas unidades fica mais pr√≥xima de voc√™ ou seria mais conveniente para estudar?

// Cada unidade pode ter cursos e hor√°rios diferentes, ent√£o me diga qual voc√™ prefere para eu te dar informa√ß√µes mais espec√≠ficas! üòä"

// **NUNCA** trate "Curitiba" como uma cidade espec√≠fica para busca de cursos. **SEMPRE** ofere√ßa as 4 op√ß√µes de unidades quando o usu√°rio mencionar Curitiba.

// ---

// üéØ **Inten√ß√£o: Fazer uma Pr√©-Matr√≠cula**

// Ao identificar alta inten√ß√£o atrav√©s das palavras-chave como:
// * "quero me inscrever"
// * "como fa√ßo a matr√≠cula"
// * "tenho interesse no curso"
// * "quero garantir minha vaga"
// * "como funciona a pr√©-matr√≠cula"
// * "pode me cadastrar?"
// * "tem como reservar?"
// * "quero come√ßar logo"

// Responda com:
// * Entusiasmo e acolhimento;
// * Convite claro e direto para pr√©-matr√≠cula;
// * Uso de gatilhos mentais (urg√™ncia, prova social, facilidade, autoridade);

// **Resposta modelo:**
// "√ìtimo saber do seu interesse! üòä Vamos garantir sua vaga com a pr√©-matr√≠cula. √â r√°pido, f√°cil e seguro. üëâ (https://www.senaipr.org.br/cursos-tecnicos/pre-matricula/)"

// ---

// üí¨ **Inten√ß√£o: Falar com Atendente Humano**

// Se o usu√°rio expressar frases como:
// * "quero falar com algu√©m"
// * "tem WhatsApp?"
// * "posso falar com um atendente?"
// * "prefiro conversar com uma pessoa"
// * "pode me chamar no WhatsApp?"

// Responda com:
// "Claro! Um dos nossos especialistas pode te atender pelo WhatsApp. Clique abaixo para conversar com a gente direto e tirar todas as suas d√∫vidas. üëâ (https://wa.me/5541987249685?text=)"

// ---

// üìå **Quando n√£o identificar claramente a inten√ß√£o**, responda com foco em:
// * Informar sobre cursos dispon√≠veis, unidades, modalidades e valores;
// * Esclarecer d√∫vidas gerais;
// * Prioritariamente, convide o usu√°rio a saber mais via WhatsApp ou formul√°rio.

// Caso n√£o tenha a informa√ß√£o espec√≠fica, indique que encaminhar√° a d√∫vida para um atendente humano. NUNCA invente dados ou cursos que n√£o existem na lista.
//         `.trim(),
//       },
//     ];

//     // Carregar hist√≥rico de mensagens do usu√°rio
//     if (email) {
//       try {
//         const [historico] = await pool.query(
//           "SELECT user_message, bot_response FROM messages WHERE email = ? ORDER BY id DESC LIMIT 10",
//           [email]
//         );

//         historico.reverse().forEach((m) => {
//           if (m.user_message && m.bot_response) {
//             mensagens.push({ role: "user", content: m.user_message });
//             mensagens.push({ role: "assistant", content: m.bot_response });
//           }
//         });
//       } catch (dbError) {
//         console.warn("‚ö†Ô∏è Erro ao carregar hist√≥rico do banco:", dbError);
//       }
//     }

//     mensagens.push({ role: "user", content: userMessage });

//     const completion = await openai.chat.completions.create({
//       model: "gpt-4o-mini",
//       messages: mensagens,
//       temperature: 0.7,
//       max_tokens: 600,
//     });

//     return completion.choices[0].message.content;
//   } catch (err) {
//     console.error("Erro ao chamar a OpenAI:", err);
//     throw new Error("Erro ao chamar a OpenAI");
//   }
// }

// // ============================================
// // üéØ FUN√á√ÉO DE EXTRA√á√ÉO DE FILTROS
// // ============================================

// /**
//  * Extrai filtros de texto para busca de cursos
//  */
// async function extrairFiltrosDeTexto(userMessage) {
//   // Se for pergunta sobre descri√ß√£o, n√£o extrair filtros para busca
//   if (detectarPerguntaDescricao(userMessage)) {
//     console.log(
//       "üîç Pergunta sobre descri√ß√£o detectada - n√£o extraindo filtros de busca"
//     );
//     return { curso: "", cidade: "", modalidade: "" };
//   }

//   const prompt = `
// Voc√™ √© um analisador especializado em extrair informa√ß√µes sobre cursos t√©cnicos.

// CURSOS V√ÅLIDOS DISPON√çVEIS:
// ${cursosDisponiveis.map((curso) => `‚Ä¢ ${curso}`).join("\n")}

// CIDADES V√ÅLIDAS DISPON√çVEIS:
// ${cidadesDisponiveis.map((cidade) => `‚Ä¢ ${cidade}`).join("\n")}

// **REGRAS ESPECIAIS DE MAPEAMENTO:**

// üè¢ **CURITIBA:**
// - Se o usu√°rio mencionar "Curitiba" (e n√£o uma unidade espec√≠fica), deixe o campo cidade VAZIO ("")
// - Se o usu√°rio mencionar especificamente: "Boqueir√£o", "Campus da Ind√∫stria", "CIC", use exatamente esses nomes

// üèôÔ∏è **S√ÉO JOS√â DOS PINHAIS:**
// - Se o usu√°rio mencionar: "S√£o Jos√© dos Pinhais", "S√£o Jos√©", "SJP", "Afonso Pena" ‚Üí use "Afonso Pena"
// - IMPORTANTE: "S√£o Jos√© dos Pinhais" no CSV √© representado pela cidade "Afonso Pena"

// üè≠ **LONDRINA:**
// - Se o usu√°rio mencionar "Londrina" (e n√£o uma unidade espec√≠fica), deixe o campo cidade VAZIO ("")
// - Se o usu√°rio mencionar especificamente: "Dr. Celso Charuri", use exatamente esse nome

// Analise a mensagem e extraia APENAS se mencionado explicitamente:
// - "curso": nome do curso t√©cnico mencionado (DEVE estar na lista acima)
// - "cidade": cidade mencionada aplicando as regras de mapeamento acima
// - "modalidade": EAD, Presencial

// EXEMPLOS DE MAPEAMENTO:
// - "tem curso em S√£o Jos√© dos Pinhais?" ‚Üí cidade: "Afonso Pena"
// - "curso em SJP" ‚Üí cidade: "Afonso Pena"
// - "curso em Afonso Pena" ‚Üí cidade: "Afonso Pena"
// - "curso em Curitiba" ‚Üí cidade: "" (vazio para oferecer op√ß√µes)
// - "curso em Boqueir√£o" ‚Üí cidade: "Boqueir√£o"
// - "curso em Londrina" ‚Üí cidade: "" (vazio para oferecer op√ß√µes)
// - "curso em Dr. Celso Charuri" ‚Üí cidade: "Dr. Celso Charuri"

// IMPORTANTE:
// - Se o curso mencionado n√£o estiver na lista v√°lida, deixe campo vazio ("")
// - Para modalidade, normalize (ex: "online" = "EAD", "presencial" = "Presencial")

// Responda APENAS com JSON v√°lido:

// {
//   "curso": "",
//   "cidade": "",
//   "modalidade": ""
// }

// Mensagem para analisar:
// "${userMessage}"
// `.trim();

//   try {
//     const completion = await openai.chat.completions.create({
//       model: "gpt-4o-mini",
//       messages: [{ role: "user", content: prompt }],
//       max_tokens: 200,
//       temperature: 0.1,
//     });

//     const texto = completion.choices[0].message.content.trim();
//     const match = texto.match(/\{[\s\S]*\}/);

//     if (match) {
//       const filtros = JSON.parse(match[0]);
//       console.log(`üîç Filtros extra√≠dos para "${userMessage}":`, filtros);
//       return filtros;
//     }

//     return { curso: "", cidade: "", modalidade: "" };
//   } catch (err) {
//     console.error("Erro ao interpretar filtros da IA:", err);
//     return { curso: "", cidade: "", modalidade: "" };
//   }
// }

// // ============================================
// // üèôÔ∏è FUN√á√ÉO AUXILIAR CURITIBA
// // ============================================

// /**
//  * Verifica se a mensagem menciona Curitiba de forma gen√©rica
//  */
// function mencionaCuritibaGenerica(userMessage) {
//   const msgLower = userMessage.toLowerCase();
//   const variacesCuritiba = ["curitiba", "cwb", "ctba"];
//   const unidadesCuritiba = [
//     "boqueir√£o",
//     "boqueirao",
//     "campus da industria",
//     "campus da ind√∫stria",
//     "cic",
//   ];

//   const mencionaCuritiba = variacesCuritiba.some((variacao) =>
//     msgLower.includes(variacao)
//   );
//   const mencionaUnidadeEspecifica = unidadesCuritiba.some((unidade) =>
//     msgLower.includes(unidade)
//   );

//   return mencionaCuritiba && !mencionaUnidadeEspecifica;
// }

// /**
//  * Verifica se a mensagem menciona Lodrina de forma generica
//  */

// function mencionaLondrinaGenerica(userMessage) {
//   const msgLower = userMessage.toLowerCase();
//   const variacoesLondrina = ["londrina", "londrina pr"];
//   const unidadeLondrina = [
//     "Dr. Celso Charuri",
//     "dr celso charuri",
//     "celso charuri",
//   ];

//   const mencionaLondrina = variacoesLondrina.some((variacao) =>
//     msgLower.includes(variacao)
//   );

//   const mencionaUnidadeEspecifica = unidadeLondrina.some((unidade) =>
//     msgLower.includes(unidade)
//   );

//   return mencionaLondrina && !mencionaUnidadeEspecifica;
// }

// function formatarCidadeParaFormulario(cidadeOriginal) {
//   if (!cidadeOriginal) return "";

//   const cidadeLower = cidadeOriginal.toLowerCase();

//   // Caso Afonso Pena (sede em S√£o Jos√© dos Pinhais)
//   if (
//     cidadeLower.includes("s√£o jos√© dos pinhais") ||
//     cidadeLower.includes("sao jose dos pinhais")
//   ) {
//     return "S√£o Jos√© dos Pinhais - Afonso Pena";
//   }

//   // Casos especiais de Curitiba - unidades que precisam do formato "Curitiba - Unidade"
//   const unidadesCuritiba = {
//     boqueir√£o: "Curitiba - Boqueir√£o",
//     boqueirao: "Curitiba - Boqueir√£o",
//     "campus da ind√∫stria": "Curitiba - Campus da Ind√∫stria",
//     "campus da industria": "Curitiba - Campus da Ind√∫stria",
//     cic: "Curitiba - CIC",
//   };

//   for (const [unidade, formato] of Object.entries(unidadesCuritiba)) {
//     if (cidadeLower.includes(unidade)) {
//       return formato;
//     }
//   }

//   return cidadeOriginal;
// }

// /**
//  * Gerar mensagem WhatsApp contextualizada com cidades especiais
//  */
// function gerarMensagemWhatsAppContextualizada(nome, curso, cidade) {
//   const cursoTexto = curso || "informa√ß√µes sobre cursos t√©cnicos";

//   // Caso especial: S√£o Jos√© dos Pinhais
//   if (
//     cidade &&
//     (cidade.toLowerCase().includes("s√£o jos√© dos pinhais") ||
//       cidade.toLowerCase().includes("sao jose dos pinhais"))
//   ) {
//     return `Ol√°! Meu nome √© ${nome}, tenho interesse no curso de ${cursoTexto} na unidade Afonso Pena em S√£o Jos√© dos Pinhais. Poderia me ajudar?`;
//   }

//   // Caso especial: Dr. Celso Charuri (unidade espec√≠fica de Londrina)
//   if (
//     cidade &&
//     (cidade.toLowerCase().includes("dr. celso charuri") ||
//       cidade.toLowerCase().includes("dr celso charuri") ||
//       cidade.toLowerCase().includes("celso charuri"))
//   ) {
//     return `Ol√°! Meu nome √© ${nome}, tenho interesse no curso de ${cursoTexto} na unidade Dr. Celso Charuri em Londrina. Poderia me ajudar?`;
//   }

//   // Casos de Curitiba (unidades espec√≠ficas)
//   const unidadesCuritiba = ["boqueir√£o", "campus da ind√∫stria", "cic"];
//   const ehUnidadeCuritiba = unidadesCuritiba.some(
//     (unidade) => cidade && cidade.toLowerCase().includes(unidade.toLowerCase())
//   );

//   if (ehUnidadeCuritiba) {
//     return `Ol√°! Meu nome √© ${nome}, tenho interesse no curso de ${cursoTexto} na unidade ${cidade} em Curitiba. Poderia me ajudar?`;
//   }

//   // Caso padr√£o para cidades normais (incluindo "Londrina" como cidade principal)
//   if (cidade) {
//     return `Ol√°! Meu nome √© ${nome}, tenho interesse no curso de ${cursoTexto} em ${cidade}. Poderia me ajudar?`;
//   } else {
//     return `Ol√°! Meu nome √© ${nome}, tenho interesse em ${cursoTexto} do SENAI Paran√°. Poderia me ajudar?`;
//   }
// }

// // ============================================
// // üöÄ INICIALIZA√á√ÉO
// // ============================================

// // Carregar dados na inicializa√ß√£o
// // function inicializarServico() {
// //   try {
// //     const resultadoCursos = carregarCursosDoCSV();
// //     carregarDescricoesDoCSV();

// //     console.log("‚úÖ Servi√ßo OpenAI inicializado com sucesso!");
// //     console.log(`üìö ${cursosDisponiveis.length} cursos carregados`);
// //     console.log(`üèôÔ∏è ${cidadesDisponiveis.length} cidades carregadas`);
// //   } catch (error) {
// //     console.error("‚ùå Erro na inicializa√ß√£o do servi√ßo OpenAI:", error);
// //   }
// // }

// // ============================================
// // üì§ EXPORTS
// // ============================================

// export {
//   getChatResponse,
//   extrairFiltrosDeTexto,
//   mencionaCuritibaGenerica,
//   mencionaLondrinaGenerica,
//   formatarCidadeParaFormulario,
//   gerarMensagemWhatsAppContextualizada,
//   detectarPerguntaDescricao,
//   extrairNomeCursoDaPergunta,
//   buscarDescricaoCurso,
//   carregarCursosDoCSV,
//   carregarDescricoesDoCSV,
// };

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> NOVA VERS√ÉO TESTE 04/06/2025 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

// import dotenv from "dotenv";
// dotenv.config();

// import pkg from "openai";
// const { OpenAI } = pkg;
// import pool from "../config/db.js";
// import Papa from "papaparse";
// import fs from "fs";
// import path from "path";

// if (!process.env.OPENAI_API_KEY) {
//   throw new Error("‚ùå OPENAI_API_KEY n√£o definida no .env");
// }

// const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// // ============================================
// // üìö VARI√ÅVEIS GLOBAIS
// // ============================================
// let cursosDisponiveis = [];
// let cidadesDisponiveis = [];
// let dicionarioDescricoes = {};
// let descricaoCarregada = false;

// // ============================================
// // üóÇÔ∏è FUN√á√ÉO PARA CARREGAR CURSOS
// // ============================================
// function carregarCursosDoCSV() {
//   try {
//     const csvPath = path.join(process.cwd(), "src", "data", "novos_cursos.csv");
//     console.log(`üìÅ Tentando carregar: ${csvPath}`);

//     if (!fs.existsSync(csvPath)) {
//       console.error(`‚ùå Arquivo n√£o encontrado: ${csvPath}`);
//       return { cursosDisponiveis: [], cidadesDisponiveis: [] };
//     }

//     const csvData = fs.readFileSync(csvPath, "utf8");
//     console.log(`üìä Tamanho do arquivo: ${csvData.length} caracteres`);

//     const result = Papa.parse(csvData, {
//       header: true,
//       skipEmptyLines: true,
//       dynamicTyping: false,
//       delimiter: ",", // For√ßa v√≠rgula como separador
//       quoteChar: '"',
//     });

//     console.log(`üìä Linhas processadas: ${result.data.length}`);
//     console.log(`üìã Colunas detectadas:`, result.meta.fields);

//     if (result.errors && result.errors.length > 0) {
//       console.warn("‚ö†Ô∏è Erros na parsea√ß√£o:", result.errors);
//     }

//     const cursos = result.data;

//     // Debug do primeiro item
//     if (cursos.length > 0) {
//       console.log("\nüîç PRIMEIRO ITEM COMPLETO:");
//       Object.entries(cursos[0]).forEach(([key, value]) => {
//         console.log(`   "${key}": "${value}"`);
//       });
//     }

//     // Estrat√©gias m√∫ltiplas para extrair cursos
//     let cursosExtraidos = [];

//     // Estrat√©gia 1: nome_curso
//     const estrategia1 = [
//       ...new Set(cursos.map((c) => c.nome_curso).filter(Boolean)),
//     ];
//     if (estrategia1.length > 0) {
//       cursosExtraidos = estrategia1;
//       console.log(
//         `‚úÖ Usando estrat√©gia 1 (nome_curso): ${estrategia1.length} cursos`
//       );
//     }

//     // Estrat√©gia 2: curso
//     if (cursosExtraidos.length === 0) {
//       const estrategia2 = [
//         ...new Set(cursos.map((c) => c.curso).filter(Boolean)),
//       ];
//       if (estrategia2.length > 0) {
//         cursosExtraidos = estrategia2;
//         console.log(
//           `‚úÖ Usando estrat√©gia 2 (curso): ${estrategia2.length} cursos`
//         );
//       }
//     }

//     // Estrat√©gia 3: Curso (mai√∫scula)
//     if (cursosExtraidos.length === 0) {
//       const estrategia3 = [
//         ...new Set(cursos.map((c) => c.Curso).filter(Boolean)),
//       ];
//       if (estrategia3.length > 0) {
//         cursosExtraidos = estrategia3;
//         console.log(
//           `‚úÖ Usando estrat√©gia 3 (Curso): ${estrategia3.length} cursos`
//         );
//       }
//     }

//     // Extrair cidades
//     const cidadesExtraidas = [
//       ...new Set(cursos.map((c) => c.cidade).filter(Boolean)),
//     ];

//     console.log(`\n‚úÖ RESULTADO FINAL:`);
//     console.log(`   Cursos √∫nicos: ${cursosExtraidos.length}`);
//     console.log(`   Cidades √∫nicas: ${cidadesExtraidas.length}`);

//     if (cursosExtraidos.length > 0) {
//       console.log(
//         `   Exemplos de cursos: ${cursosExtraidos.slice(0, 3).join(", ")}`
//       );
//     }

//     if (cidadesExtraidas.length > 0) {
//       console.log(
//         `   Exemplos de cidades: ${cidadesExtraidas.slice(0, 3).join(", ")}`
//       );
//     }

//     // Atualizar vari√°veis globais
//     cursosDisponiveis = cursosExtraidos;
//     cidadesDisponiveis = cidadesExtraidas;

//     return {
//       cursosDisponiveis: cursosExtraidos,
//       cidadesDisponiveis: cidadesExtraidas,
//     };
//   } catch (error) {
//     console.error("‚ùå Erro ao carregar cursos do CSV:", error);
//     return { cursosDisponiveis: [], cidadesDisponiveis: [] };
//   }
// }

// // ============================================
// // üìñ FUN√á√ÉO PARA CARREGAR DESCRI√á√ïES
// // ============================================
// function carregarDescricoesDoCSV() {
//   if (descricaoCarregada) {
//     return dicionarioDescricoes;
//   }

//   try {
//     const csvPath = path.join(
//       process.cwd(),
//       "src",
//       "data",
//       "curso_tecnicos.csv"
//     );

//     if (!fs.existsSync(csvPath)) {
//       console.warn("‚ö†Ô∏è Arquivo de descri√ß√µes n√£o encontrado:", csvPath);
//       return {};
//     }

//     const csvData = fs.readFileSync(csvPath, "utf8");

//     const result = Papa.parse(csvData, {
//       header: true,
//       skipEmptyLines: true,
//       dynamicTyping: false,
//       delimiter: ",",
//       quoteChar: '"',
//     });

//     const descricoes = result.data;
//     dicionarioDescricoes = {};

//     // Processar cada linha do CSV
//     descricoes.forEach((row) => {
//       const nomeBruto = row["Nome do Curso"];
//       if (!nomeBruto) return;

//       // Normalizar o nome para busca
//       const nomeNormalizado = nomeBruto
//         .toLowerCase()
//         .normalize("NFD")
//         .replace(/[\u0300-\u036f]/g, "");

//       // Armazenar no dicion√°rio
//       dicionarioDescricoes[nomeNormalizado] = {
//         nome: nomeBruto,
//         objetivo: row["Objetivos do Curso"] || "Informa√ß√£o n√£o dispon√≠vel",
//         publicoAlvo: row["P√∫blico-Alvo"] || "Informa√ß√£o n√£o dispon√≠vel",
//         ondeTrabalhar:
//           row["Onde Pode Trabalhar"] || "Informa√ß√£o n√£o dispon√≠vel",
//       };
//     });

//     descricaoCarregada = true;
//     console.log(
//       `‚úÖ Carregadas descri√ß√µes de ${
//         Object.keys(dicionarioDescricoes).length
//       } cursos`
//     );

//     return dicionarioDescricoes;
//   } catch (error) {
//     console.error("‚ùå Erro ao carregar descri√ß√µes do CSV:", error);
//     return {};
//   }
// }

// // ============================================
// // üîç FUN√á√ïES DE DETEC√á√ÉO DE PERGUNTAS SOBRE DESCRI√á√ÉO
// // ============================================

// /**
//  * Detecta se o usu√°rio est√° perguntando sobre descri√ß√£o/conte√∫do de um curso espec√≠fico
//  */
// function detectarPerguntaDescricao(userMessage) {
//   const msgLower = userMessage.toLowerCase();

//   // Exclus√µes - N√ÉO s√£o perguntas sobre descri√ß√£o
//   const exclusoes = [
//     /tem\?$/,
//     /voc√™s t√™m/,
//     /existe/,
//     /dispon√≠vel/,
//     /oferece/,
//     /em\s+\w+.*modalidade/,
//     /modalidade.*em\s+\w+/,
//     /na\s+modalidade.*em/,
//     /em\s+\w+.*ead|presencial/,
//     /quais\s+cursos/,
//     /que\s+cursos/,
//     /lista.*cursos/,
//   ];

//   if (exclusoes.some((regex) => regex.test(msgLower))) {
//     return false;
//   }

//   // Inclus√µes - S√ÉO perguntas sobre descri√ß√£o
//   const palavrasChaveDescricao = [
//     /o que √©\s+(?:o\s+)?curso\s+de\s+\w+/,
//     /sobre\s+o\s+curso\s+de\s+\w+/,
//     /do que se trata\s+(?:o\s+)?curso/,
//     /conte√∫do\s+do\s+curso\s+de/,
//     /o que\s+vou\s+aprender.*curso\s+de/,
//     /mat√©rias\s+do\s+curso/,
//     /disciplinas.*curso\s+de/,
//     /grade\s+curricular.*curso/,
//     /objetivo.*curso\s+de/,
//     /onde\s+posso\s+trabalhar.*curso\s+de/,
//     /√°rea\s+de\s+atua√ß√£o.*curso/,
//     /mercado\s+de\s+trabalho.*curso/,
//     /p√∫blico\s+alvo.*curso/,
//     /para\s+quem\s+√©.*curso\s+de/,
//     /quem\s+pode\s+fazer.*curso\s+de/,
//     /me fale sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /fale\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /me conte sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /conte\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+as\s+mat√©rias\s+do\s+curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+mat√©rias.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /que\s+mat√©rias.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+as\s+disciplinas.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+disciplinas.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /qual\s+a\s+carga\s+hor√°ria\s+do\s+curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /qual\s+a\s+carga\s+horaria\s+do\s+curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /carga\s+hor√°ria.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /carga\s+horaria.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quantas\s+horas.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /explique\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /me explique\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /descreva\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /me descreva\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /dura√ß√£o.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /duracao.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quanto\s+tempo\s+dura.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /tempo\s+de\s+dura√ß√£o.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quantos\s+semestres.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quantos\s+anos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /informa√ß√µes\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /informacoes\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /detalhes\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /gostaria\s+de\s+saber\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quero\s+saber\s+sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /estrutura.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /m√≥dulos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /modulos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+os\s+m√≥dulos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /matriz\s+curricular.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /ementa.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /objetivos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /qual\s+o\s+objetivo.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quais\s+os\s+objetivos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /finalidade.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /para\s+que\s+serve.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /compet√™ncias.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /competencias.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /habilidades.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /skills.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /o\s+que\s+desenvolve.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /pr√©-requisitos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /pre\s+requisitos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /requisitos.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /p√∫blico-alvo.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /publico\s+alvo.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /quem\s+pode\s+fazer.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /onde\s+trabalhar.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /campo\s+de\s+trabalho.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /oportunidades.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /carreira.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /profiss√£o.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /emprego.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /como\s+√©\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /vale\s+a\s+pena.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//     /√©\s+bom.*curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)\w+/,
//   ];

//   return palavrasChaveDescricao.some((regex) => regex.test(msgLower));
// }

// /**
//  * Extrai o nome do curso de uma pergunta sobre descri√ß√£o
//  */
// function extrairNomeCursoDaPergunta(userMessage) {
//   const padroes = [
//     /o que √©\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)?(.+?)(?:\?|$)/i,
//     /sobre\s+(?:o\s+)?curso\s+(?:de\s+|t√©cnico\s+(?:de\s+)?)?(.+?)(?:\?|$)/i,
//     /conte√∫do\s+do\s+curso\s+(?:de\s+)?(.+?)(?:\?|$)/i,
//     /o que\s+vou\s+aprender.*curso\s+(?:de\s+)?(.+?)(?:\?|$)/i,
//     /mat√©rias\s+do\s+curso\s+(?:de\s+)?(.+?)(?:\?|$)/i,
//     /^(.+?)\s+[-‚Äì]\s*(?:o que √©|sobre|conte√∫do)/i,
//     /curso\s+(?:de\s+)?(.+?)\s+[-‚Äì]\s*(?:conte√∫do|o que √©|sobre)/i,
//   ];

//   for (const padrao of padroes) {
//     const match = userMessage.match(padrao);
//     if (match && match[1]) {
//       let nomeCurso = match[1].trim();

//       // Limpar o nome extra√≠do
//       nomeCurso = nomeCurso
//         .replace(/^(do|da|de|curso|t√©cnico|em|na|no)\s+/i, "")
//         .replace(/\s+(do|da|de|curso|t√©cnico|tem|existe)$/i, "")
//         .replace(/\s+e\s+.*/i, "")
//         .replace(/\s*[,;].*/i, "")
//         .trim();

//       // Verificar se o nome √© v√°lido
//       const palavrasGenericas = [
//         "curso",
//         "cursos",
//         "t√©cnico",
//         "modalidade",
//         "ead",
//         "presencial",
//       ];
//       if (
//         nomeCurso.length > 2 &&
//         !palavrasGenericas.includes(nomeCurso.toLowerCase())
//       ) {
//         return nomeCurso;
//       }
//     }
//   }

//   // Fallback: procurar diretamente pelos nomes dos cursos dispon√≠veis
//   for (const curso of cursosDisponiveis) {
//     if (userMessage.toLowerCase().includes(curso.toLowerCase())) {
//       return curso;
//     }
//   }

//   return null;
// }

// /**
//  * Busca descri√ß√£o de um curso no dicion√°rio carregado
//  */
// function buscarDescricaoCurso(nomeCurso) {
//   if (!nomeCurso) return null;

//   // Garantir que as descri√ß√µes est√£o carregadas
//   carregarDescricoesDoCSV();

//   // Normalizar o nome para busca
//   const nomeNormalizado = nomeCurso
//     .toLowerCase()
//     .normalize("NFD")
//     .replace(/[\u0300-\u036f]/g, "");

//   const curso = dicionarioDescricoes[nomeNormalizado];

//   if (curso) {
//     return `üìö **${curso.nome}**

// üéØ **Objetivo do Curso:**
// ${curso.objetivo}

// üë• **P√∫blico-Alvo:**
// ${curso.publicoAlvo}

// üíº **Onde Pode Trabalhar:**
// ${curso.ondeTrabalhar}`;
//   }

//   return null;
// }

// // ============================================
// // ü§ñ FUN√á√ÉO PRINCIPAL DO CHAT
// // ============================================

// /**
//  * Envia a mensagem do usu√°rio para o modelo GPT com hist√≥rico
//  */
// async function getChatResponse(userMessage, email) {
//   try {
//     const mensagens = [
//       {
//         role: "system",
//         content: `
// Voc√™ √© o assistente virtual especializado em Cursos T√©cnicos do Senai Paran√°.

// Sua miss√£o √© acolher, informar e converter leads interessados em matr√≠culas nos cursos t√©cnicos oferecidos pelo Senai Paran√°.

// Adote um tom simp√°tico, acolhedor, direto e √∫til. Sempre utilize gatilhos mentais para incentivar a realiza√ß√£o da pr√©-matr√≠cula.

// ---

// üìö **CURSOS DISPON√çVEIS (APENAS ESTES EXISTEM):**
// ${cursosDisponiveis.map((curso) => `‚Ä¢ ${curso}`).join("\n")}

// üèôÔ∏è **CIDADES DISPON√çVEIS (APENAS ESTAS EXISTEM):**
// ${cidadesDisponiveis.map((cidade) => `‚Ä¢ ${cidade}`).join("\n")}

// ‚ö†Ô∏è **IMPORTANTE:** Voc√™ s√≥ pode mencionar cursos e cidades que est√£o nas listas acima. Se o usu√°rio perguntar sobre um curso ou cidade que n√£o existe na lista, informe educadamente que n√£o temos essa op√ß√£o dispon√≠vel e sugira alternativas similares da lista ou pe√ßa para falar com um atendente.

// ---

// üè¢ **TRATAMENTO ESPECIAL PARA CURITIBA:**

// Quando o usu√°rio mencionar **"Curitiba"** como cidade desejada, voc√™ deve responder:

// "√ìtimo! Em Curitiba temos 4 unidades do SENAI para voc√™ escolher:

// üìç **Boqueir√£o** - Regi√£o sul de Curitiba
// üìç **Campus da Ind√∫stria** - Regi√£o central
// üìç **CIC** - Cidade Industrial de Curitiba
// üìç **Dr. Celso Charuri** - Regi√£o espec√≠fica

// Qual dessas unidades fica mais pr√≥xima de voc√™ ou seria mais conveniente para estudar?

// Cada unidade pode ter cursos e hor√°rios diferentes, ent√£o me diga qual voc√™ prefere para eu te dar informa√ß√µes mais espec√≠ficas! üòä"

// **NUNCA** trate "Curitiba" como uma cidade espec√≠fica para busca de cursos. **SEMPRE** ofere√ßa as 4 op√ß√µes de unidades quando o usu√°rio mencionar Curitiba.

// ---

// üéØ **Inten√ß√£o: Fazer uma Pr√©-Matr√≠cula**

// Ao identificar alta inten√ß√£o atrav√©s das palavras-chave como:
// * "quero me inscrever"
// * "como fa√ßo a matr√≠cula"
// * "tenho interesse no curso"
// * "quero garantir minha vaga"
// * "como funciona a pr√©-matr√≠cula"
// * "pode me cadastrar?"
// * "tem como reservar?"
// * "quero come√ßar logo"

// Responda com:
// * Entusiasmo e acolhimento;
// * Convite claro e direto para pr√©-matr√≠cula;
// * Uso de gatilhos mentais (urg√™ncia, prova social, facilidade, autoridade);

// **Resposta modelo:**
// "√ìtimo saber do seu interesse! üòä Vamos garantir sua vaga com a pr√©-matr√≠cula. √â r√°pido, f√°cil e seguro. üëâ (https://www.senaipr.org.br/cursos-tecnicos/pre-matricula/)"

// ---

// üí¨ **Inten√ß√£o: Falar com Atendente Humano**

// Se o usu√°rio expressar frases como:
// * "quero falar com algu√©m"
// * "tem WhatsApp?"
// * "posso falar com um atendente?"
// * "prefiro conversar com uma pessoa"
// * "pode me chamar no WhatsApp?"

// Responda com:
// "Claro! Um dos nossos especialistas pode te atender pelo WhatsApp. Clique abaixo para conversar com a gente direto e tirar todas as suas d√∫vidas. üëâ (https://wa.me/5541987249685?text=)"

// ---

// üìå **Quando n√£o identificar claramente a inten√ß√£o**, responda com foco em:
// * Informar sobre cursos dispon√≠veis, unidades, modalidades e valores;
// * Esclarecer d√∫vidas gerais;
// * Prioritariamente, convide o usu√°rio a saber mais via WhatsApp ou formul√°rio.

// Caso n√£o tenha a informa√ß√£o espec√≠fica, indique que encaminhar√° a d√∫vida para um atendente humano. NUNCA invente dados ou cursos que n√£o existem na lista.
//         `.trim(),
//       },
//     ];

//     // Carregar hist√≥rico de mensagens do usu√°rio
//     if (email) {
//       try {
//         const [historico] = await pool.query(
//           "SELECT user_message, bot_response FROM messages WHERE email = ? ORDER BY id DESC LIMIT 10",
//           [email]
//         );

//         historico.reverse().forEach((m) => {
//           if (m.user_message && m.bot_response) {
//             mensagens.push({ role: "user", content: m.user_message });
//             mensagens.push({ role: "assistant", content: m.bot_response });
//           }
//         });
//       } catch (dbError) {
//         console.warn("‚ö†Ô∏è Erro ao carregar hist√≥rico do banco:", dbError);
//       }
//     }

//     mensagens.push({ role: "user", content: userMessage });

//     const completion = await openai.chat.completions.create({
//       model: "gpt-4o-mini",
//       messages: mensagens,
//       temperature: 0.7,
//       max_tokens: 600,
//     });

//     return completion.choices[0].message.content;
//   } catch (err) {
//     console.error("Erro ao chamar a OpenAI:", err);
//     throw new Error("Erro ao chamar a OpenAI");
//   }
// }

// // ============================================
// // üéØ FUN√á√ÉO DE EXTRA√á√ÉO DE FILTROS - SIMPLIFICADA
// // ============================================

// /**
//  * Extrai filtros de texto para busca de cursos - VERS√ÉO SIMPLIFICADA
//  */
// async function extrairFiltrosDeTexto(userMessage) {
//   // Se for pergunta sobre descri√ß√£o, n√£o extrair filtros para busca
//   if (detectarPerguntaDescricao(userMessage)) {
//     console.log(
//       "üîç Pergunta sobre descri√ß√£o detectada - n√£o extraindo filtros de busca"
//     );
//     return { curso: "", cidade: "", modalidade: "" };
//   }

//   const prompt = `
// Voc√™ √© um analisador especializado em extrair informa√ß√µes sobre cursos t√©cnicos.

// CURSOS V√ÅLIDOS DISPON√çVEIS:
// ${cursosDisponiveis.map((curso) => `‚Ä¢ ${curso}`).join("\n")}

// CIDADES V√ÅLIDAS DISPON√çVEIS:
// ${cidadesDisponiveis.map((cidade) => `‚Ä¢ ${cidade}`).join("\n")}

// **REGRAS ESPECIAIS DE MAPEAMENTO:**

// üè¢ **CURITIBA:**
// - Se o usu√°rio mencionar "Curitiba" (e n√£o uma unidade espec√≠fica), deixe o campo cidade VAZIO ("")
// - Se o usu√°rio mencionar especificamente: "Boqueir√£o", "Campus da Ind√∫stria", "CIC", use exatamente esses nomes

// üèôÔ∏è **S√ÉO JOS√â DOS PINHAIS:**
// - Se o usu√°rio mencionar: "S√£o Jos√© dos Pinhais", "S√£o Jos√©", "SJP" ‚Üí use "S√£o Jos√© dos Pinhais"
// - Agora est√° correto no CSV como "S√£o Jos√© dos Pinhais"

// üè≠ **LONDRINA:**
// - Se o usu√°rio mencionar "Londrina" (e n√£o uma unidade espec√≠fica), deixe o campo cidade VAZIO ("")
// - Se o usu√°rio mencionar especificamente: "Dr. Celso Charuri", use exatamente esse nome

// Analise a mensagem e extraia APENAS se mencionado explicitamente:
// - "curso": nome do curso t√©cnico mencionado (DEVE estar na lista acima)
// - "cidade": cidade mencionada aplicando as regras de mapeamento acima
// - "modalidade": EAD, Presencial

// EXEMPLOS DE MAPEAMENTO SIMPLIFICADOS:
// - "tem curso em S√£o Jos√© dos Pinhais?" ‚Üí cidade: "S√£o Jos√© dos Pinhais"
// - "curso em SJP" ‚Üí cidade: "S√£o Jos√© dos Pinhais"
// - "curso em Curitiba" ‚Üí cidade: "" (vazio para oferecer op√ß√µes)
// - "curso em Boqueir√£o" ‚Üí cidade: "Boqueir√£o"
// - "curso em Londrina" ‚Üí cidade: "" (vazio para oferecer op√ß√µes)
// - "curso em Dr. Celso Charuri" ‚Üí cidade: "Dr. Celso Charuri"

// IMPORTANTE:
// - Se o curso mencionado n√£o estiver na lista v√°lida, deixe campo vazio ("")
// - Para modalidade, normalize (ex: "online" = "EAD", "presencial" = "Presencial")

// Responda APENAS com JSON v√°lido:

// {
//   "curso": "",
//   "cidade": "",
//   "modalidade": ""
// }

// Mensagem para analisar:
// "${userMessage}"
// `.trim();

//   try {
//     const completion = await openai.chat.completions.create({
//       model: "gpt-4o-mini",
//       messages: [{ role: "user", content: prompt }],
//       max_tokens: 200,
//       temperature: 0.1,
//     });

//     const texto = completion.choices[0].message.content.trim();
//     const match = texto.match(/\{[\s\S]*\}/);

//     if (match) {
//       const filtros = JSON.parse(match[0]);
//       console.log(`üîç Filtros extra√≠dos para "${userMessage}":`, filtros);
//       return filtros;
//     }

//     return { curso: "", cidade: "", modalidade: "" };
//   } catch (err) {
//     console.error("Erro ao interpretar filtros da IA:", err);
//     return { curso: "", cidade: "", modalidade: "" };
//   }
// }

// // ============================================
// // üèôÔ∏è FUN√á√ïES AUXILIARES SIMPLIFICADAS
// // ============================================

// /**
//  * Verifica se a mensagem menciona Curitiba de forma gen√©rica
//  */
// function mencionaCuritibaGenerica(userMessage) {
//   const msgLower = userMessage.toLowerCase();
//   const variacesCuritiba = ["curitiba", "cwb", "ctba"];
//   const unidadesCuritiba = [
//     "boqueir√£o",
//     "boqueirao",
//     "campus da industria",
//     "campus da ind√∫stria",
//     "cic",
//   ];

//   const mencionaCuritiba = variacesCuritiba.some((variacao) =>
//     msgLower.includes(variacao)
//   );
//   const mencionaUnidadeEspecifica = unidadesCuritiba.some((unidade) =>
//     msgLower.includes(unidade)
//   );

//   return mencionaCuritiba && !mencionaUnidadeEspecifica;
// }

// /**
//  * Verifica se a mensagem menciona Londrina de forma gen√©rica
//  */
// function mencionaLondrinaGenerica(userMessage) {
//   const msgLower = userMessage.toLowerCase();
//   const variacoesLondrina = ["londrina", "londrina pr"];
//   const unidadeLondrina = [
//     "Dr. Celso Charuri",
//     "dr celso charuri",
//     "celso charuri",
//   ];

//   const mencionaLondrina = variacoesLondrina.some((variacao) =>
//     msgLower.includes(variacao)
//   );

//   const mencionaUnidadeEspecifica = unidadeLondrina.some((unidade) =>
//     msgLower.includes(unidade)
//   );

//   return mencionaLondrina && !mencionaUnidadeEspecifica;
// }

// /**
//  * Formatar cidade para formul√°rio - SIMPLIFICADO
//  */
// function formatarCidadeParaFormulario(cidadeOriginal) {
//   if (!cidadeOriginal) return "";

//   const cidadeLower = cidadeOriginal.toLowerCase();

//   // Casos especiais de Curitiba - unidades que precisam do formato "Curitiba - Unidade"
//   const unidadesCuritiba = {
//     boqueir√£o: "Curitiba - Boqueir√£o",
//     boqueirao: "Curitiba - Boqueir√£o",
//     "campus da ind√∫stria": "Curitiba - Campus da Ind√∫stria",
//     "campus da industria": "Curitiba - Campus da Ind√∫stria",
//     cic: "Curitiba - CIC",
//   };

//   for (const [unidade, formato] of Object.entries(unidadesCuritiba)) {
//     if (cidadeLower.includes(unidade)) {
//       return formato;
//     }
//   }

//   // Para todas as outras cidades, usar como est√° (incluindo "S√£o Jos√© dos Pinhais")
//   return cidadeOriginal;
// }

// /**
//  * Gerar mensagem WhatsApp contextualizada - SIMPLIFICADA
//  */
// function gerarMensagemWhatsAppContextualizada(nome, curso, cidade) {
//   const cursoTexto = curso || "informa√ß√µes sobre cursos t√©cnicos";

//   // Caso especial: Dr. Celso Charuri (unidade espec√≠fica de Londrina)
//   if (
//     cidade &&
//     (cidade.toLowerCase().includes("dr. celso charuri") ||
//       cidade.toLowerCase().includes("dr celso charuri") ||
//       cidade.toLowerCase().includes("celso charuri"))
//   ) {
//     return `Ol√°! Meu nome √© ${nome}, tenho interesse no curso de ${cursoTexto} na unidade Dr. Celso Charuri em Londrina. Poderia me ajudar?`;
//   }

//   // Casos de Curitiba (unidades espec√≠ficas)
//   const unidadesCuritiba = ["boqueir√£o", "campus da ind√∫stria", "cic"];
//   const ehUnidadeCuritiba = unidadesCuritiba.some(
//     (unidade) => cidade && cidade.toLowerCase().includes(unidade.toLowerCase())
//   );

//   if (ehUnidadeCuritiba) {
//     return `Ol√°! Meu nome √© ${nome}, tenho interesse no curso de ${cursoTexto} na unidade ${cidade} em Curitiba. Poderia me ajudar?`;
//   }

//   // Caso padr√£o para todas as outras cidades (incluindo S√£o Jos√© dos Pinhais)
//   if (cidade) {
//     return `Ol√°! Meu nome √© ${nome}, tenho interesse no curso de ${cursoTexto} em ${cidade}. Poderia me ajudar?`;
//   } else {
//     return `Ol√°! Meu nome √© ${nome}, tenho interesse em ${cursoTexto} do SENAI Paran√°. Poderia me ajudar?`;
//   }
// }

// // ============================================
// // üì§ EXPORTS
// // ============================================

// export {
//   getChatResponse,
//   extrairFiltrosDeTexto,
//   mencionaCuritibaGenerica,
//   mencionaLondrinaGenerica,
//   formatarCidadeParaFormulario,
//   gerarMensagemWhatsAppContextualizada,
//   detectarPerguntaDescricao,
//   extrairNomeCursoDaPergunta,
//   buscarDescricaoCurso,
//   carregarCursosDoCSV,
//   carregarDescricoesDoCSV,
// };
